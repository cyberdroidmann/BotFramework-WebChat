{"version":3,"sources":["Attachment.js","ImBackButton.js","MessageBackButton.js","PostBackButton.js","CardActionButton.js","SuggestedActions.js","util/getValueOrUndefined.js","PlainWebChat.js","App.js","serviceWorker.js","index.js"],"names":["Attachment","_ref","content","contentUrl","contentType","name","react_default","a","createElement","alt","src","href","rel","target","JSON","stringify","useSendMessage","hooks","ImBackButton","_ref$cardAction","cardAction","title","value","sendMessage","handleClick","useCallback","onClick","type","useSendMessageBack","MessageBackButton","displayText","text","sendMessageBack","useSendPostBack","PostBackButton","sendPostBack","CardActionButton","src_MessageBackButton","src_PostBackButton","src_ImBackButton","useSuggestedActions","SuggestedActions","suggestedActions","length","map","index","key","getValueOrUndefined","object","_len","arguments","path","Array","_key","shift","apply","concat","useActivities","PlainWebChat","_useActivities","activities","Object","slicedToArray","_useState","useState","_useState2","sendBoxValue","setSendBoxValue","handleChange","handleSubmit","event","preventDefault","filter","_ref2","_ref3","_ref3$channelData","channelData","postBack","from","role","activity","objectSpread","attachments","_ref4","Fragment","id","src_Attachment","textFormat","attachment","src_SuggestedActions","onSubmit","autoFocus","onChange","_callee","res","token","regenerator_default","wrap","_context","prev","next","fetch","method","sent","json","abrupt","stop","Boolean","window","location","hostname","match","ReactDOM","render","_React$useState","React","_React$useState2","directLine","setDirectLine","getDirectLineToken","then","createDirectLine","lib","Composer","src_PlainWebChat","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b477fc52.chunk.js","sourcesContent":["import React from 'react';\n\nconst Attachment = ({ content, contentUrl, contentType, name }) => {\n  switch (contentType) {\n    case 'image/gif':\n    case 'image/jpeg':\n    case 'image/png':\n    case 'image/svg':\n    case 'image/svg+xml':\n      return <img alt={name} src={contentUrl} />;\n\n    case 'text/markdown':\n    case 'text/plain':\n      return <p>{content}</p>;\n\n    default:\n      if (contentUrl) {\n        return (\n          <a href={contentUrl} rel=\"noopener noreferrer\" target=\"_blank\">\n            {name}\n          </a>\n        );\n      } else {\n        return <pre>{JSON.stringify(content, null, 2)}</pre>;\n      }\n  }\n};\n\nexport default Attachment;\n","import { hooks } from 'botframework-webchat-component';\nimport React, { useCallback } from 'react';\n\nconst { useSendMessage } = hooks;\n\nconst ImBackButton = ({ cardAction: { title, value } }) => {\n  const sendMessage = useSendMessage();\n  const handleClick = useCallback(() => sendMessage(value), [value, sendMessage]);\n\n  return (\n    <button\n      // ImBack is essentially sending a message\n      onClick={handleClick}\n      type=\"button\"\n    >\n      ImBack: {title}\n    </button>\n  );\n};\n\nexport default ImBackButton;\n","import { hooks } from 'botframework-webchat-component';\nimport React, { useCallback } from 'react';\n\nconst { useSendMessageBack } = hooks;\n\nconst MessageBackButton = ({ cardAction: { displayText, text, title, value } }) => {\n  const sendMessageBack = useSendMessageBack();\n\n  const handleClick = useCallback(() => sendMessageBack(value, text, displayText), [\n    displayText,\n    sendMessageBack,\n    text,\n    value\n  ]);\n\n  return (\n    <button\n      // Web Chat does the heavylifting for us by exposing a \"sendMessageBack\" function.\n      // We do need to handle \"displayText\" manually in our renderer though.\n      onClick={handleClick}\n      type=\"button\"\n    >\n      MessageBack: {title}\n    </button>\n  );\n};\n\nexport default MessageBackButton;\n","import { hooks } from 'botframework-webchat-component';\nimport React, { useCallback } from 'react';\n\nconst { useSendPostBack } = hooks;\n\nconst PostBackButton = ({ cardAction: { title, value } }) => {\n  const sendPostBack = useSendPostBack();\n  const handleClick = useCallback(() => sendPostBack(value), [value, sendPostBack]);\n\n  return (\n    <button\n      // Web Chat does the heavylifting for us by exposing a \"sendPostBack\" function.\n      onClick={handleClick}\n      type=\"button\"\n    >\n      PostBack: {title}\n    </button>\n  );\n};\n\nexport default PostBackButton;\n","import React from 'react';\n\nimport ImBackButton from './ImBackButton';\nimport MessageBackButton from './MessageBackButton';\nimport PostBackButton from './PostBackButton';\n\n// \"cardAction\" could be either, \"imBack\", \"messageBack\", or \"postBack\".\nexport default ({ cardAction }) => {\n  switch (cardAction.type) {\n    case 'messageBack':\n      return <MessageBackButton cardAction={cardAction} />;\n\n    case 'postBack':\n      return <PostBackButton cardAction={cardAction} />;\n\n    default:\n      return <ImBackButton cardAction={cardAction} />;\n  }\n};\n","import { hooks } from 'botframework-webchat-component';\nimport React, { useCallback } from 'react';\n\nimport CardActionButton from './CardActionButton';\n\nconst { useSuggestedActions } = hooks;\n\n// Web Chat cleaned up the suggestedActions for us.\n// If the last activity is from the bot and contains \"suggestedActions\", Web Chat will send it to us thru \"suggestedActions\".\nconst SuggestedActions = () => {\n  const suggestedActions = useSuggestedActions();\n\n  return (\n    !!suggestedActions.length && (\n      <ul>\n        {suggestedActions.map((cardAction, index) => (\n          <li key={index}>\n            <CardActionButton cardAction={cardAction} />\n          </li>\n        ))}\n      </ul>\n    )\n  );\n};\n\nexport default SuggestedActions;\n","// This function will follow a path to get a value from an object.\n// If the path leads to \"undefined\", we will return \"undefined\" instead.\nexport default function getValueOrUndefined(object, ...path) {\n  if (typeof object !== 'undefined' && path.length) {\n    const key = path.shift();\n\n    return getValueOrUndefined(object[key], ...path);\n  } else {\n    return object;\n  }\n}\n","import { hooks } from 'botframework-webchat-component';\nimport React, { useCallback, useState } from 'react';\n\nimport Attachment from './Attachment';\nimport SuggestedActions from './SuggestedActions';\n\nimport getValueOrUndefined from './util/getValueOrUndefined';\n\nconst { useActivities, useSendMessage } = hooks;\n\nconst PlainWebChat = () => {\n  const [activities] = useActivities();\n  const sendMessage = useSendMessage();\n\n  const [sendBoxValue, setSendBoxValue] = useState('');\n\n  const handleChange = useCallback(({ target: { value } }) => setSendBoxValue(value), [setSendBoxValue]);\n\n  const handleSubmit = useCallback(\n    event => {\n      event.preventDefault();\n\n      sendMessage(sendBoxValue);\n      setSendBoxValue('');\n    },\n    [sendMessage, setSendBoxValue]\n  );\n\n  return (\n    <div>\n      <ul>\n        {activities\n          // Currently, this sample only displays an activity of type \"message\"\n          .filter(({ type }) => type === 'message')\n          // We need to hide \"postBack\" message sent by the user\n          .filter(({ channelData: { postBack } = {}, from: { role } }) => !(role === 'user' && postBack))\n          // Normalize the activity:\n          // - Every activity should have an \"attachments\" array, consisting of zero or more attachments:\n          // - If this is a \"messageBack\" message, we should use the \"displayText\",\n          //   because \"text\" is being submitted to bot, and \"displayText\" is what we use to override what the bot displays to the user.\n          .map(activity => ({\n            ...activity,\n            attachments: activity.attachments || [],\n            text: getValueOrUndefined(activity, 'channelData', 'messageBack', 'displayText') || activity.text\n          }))\n          // Filter out all empty messages (no attachments or text)\n          .filter(({ attachments, text }) => attachments.length || text)\n          .map((activity, index) => (\n            <React.Fragment key={activity.id || index}>\n              <li>\n                {!!activity.text && (\n                  // We are using the very same component for text message and attachments.\n                  // This is because, attachments can also have \"text/markdown\" or \"text/plain\" content.\n                  // In this case, we prefer to have a single component for both of them.\n                  <Attachment\n                    content={activity.text}\n                    contentType={activity.textFormat === 'markdown' ? 'text/markdown' : 'text/plain'}\n                  />\n                )}\n                {!!activity.attachments.length && (\n                  <ul>\n                    {activity.attachments.map((attachment, index) => (\n                      <li key={index}>\n                        <Attachment {...attachment} />\n                      </li>\n                    ))}\n                  </ul>\n                )}\n              </li>\n            </React.Fragment>\n          ))}\n      </ul>\n      <div>\n        {/* This is the send box, and suggested actions change based on the send box, not activity */}\n        <SuggestedActions />\n        <form onSubmit={handleSubmit}>\n          <input autoFocus={true} onChange={handleChange} type=\"textbox\" value={sendBoxValue} />\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default PlainWebChat;\n","import { Components } from 'botframework-webchat-component';\nimport { createDirectLine } from 'botframework-webchat';\nimport React from 'react';\n\nimport PlainWebChat from './PlainWebChat';\n\n// In this demo, we are using Direct Line token from MockBot.\n// To talk to your bot, you should use the token exchanged using your Direct Line secret.\n// You should never put the Direct Line secret in the browser or client app.\n// https://docs.microsoft.com/en-us/azure/bot-service/rest-api/bot-framework-rest-direct-line-3-0-authentication\n\nasync function getDirectLineToken() {\n  const res = await fetch('https://webchat-mockbot.azurewebsites.net/directline/token', { method: 'POST' });\n  const { token } = await res.json();\n\n  return token;\n}\n\nexport default () => {\n  const [directLine, setDirectLine] = React.useState();\n\n  if (!directLine) {\n    // We will load DirectLineJS asynchronously on first render.\n    getDirectLineToken().then(token => setDirectLine(createDirectLine({ token })));\n  }\n\n  return (\n    // We are using the \"Composer\" component here, which all descendants will have access to the Web Chat API by HOC-ing thru \"connectToWebChat\".\n    <React.Fragment>\n      <h1>Web Chat with plain UI</h1>\n      <p>\n        This sample shows how to use Web Chat without any of its canned UI component. There are few conversation you can\n        try out.\n      </p>\n      <ol>\n        <li>\n          Say <code>image</code> to the bot\n        </li>\n        <li>\n          Say <code>suggested-actions</code> to the bot\n        </li>\n        <li>\n          Say <code>card bingsports</code> to the bot\n        </li>\n      </ol>\n      <p>\n        For the{' '}\n        <a href=\"https://github.com/microsoft/BotFramework-WebChat/tree/master/samples/21.customization-plain-ui/\">\n          source code of this demo\n        </a>\n        , please visit <a href=\"https://github.com/microsoft/BotFramework-WebChat/\">our GitHub repository</a>.\n      </p>\n      <hr />\n      {!!directLine && (\n        <Components.Composer directLine={directLine}>\n          <PlainWebChat />\n        </Components.Composer>\n      )}\n    </React.Fragment>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}